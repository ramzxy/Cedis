name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  BOOST_VERSION: "1.84.0"
  CMAKE_VERSION: "3.28.0"

jobs:
  # Linux builds
  linux:
    name: Linux (${{ matrix.build_type }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Release, Debug]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          echo "Running on Ubuntu 22.04"
          echo "Build type: ${{ matrix.build_type }}"

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends libboost-system-dev libboost-thread-dev cmake build-essential

      - name: Make scripts executable
        run: |
          chmod +x install_dependencies.sh build.sh

      - name: Verify dependencies
        run: |
          ./install_dependencies.sh --verify

      - name: Build project
        run: |
          ./build.sh --${{ matrix.build_type == 'Release' && 'release' || 'debug' }}

      - name: Test build artifacts
        run: |
          cd build
          file Cedis
          ls -la Cedis
          echo "Build completed successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cedis-linux-${{ matrix.build_type }}
          path: build/Cedis
          retention-days: 7

  # macOS builds
  macos:
    name: macOS (${{ matrix.build_type }})
    runs-on: macos-latest
    strategy:
      matrix:
        build_type: [Release, Debug]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          echo "Running on macOS 14"
          echo "Build type: ${{ matrix.build_type }}"

      - name: Install dependencies
        run: |
          brew install boost cmake

      - name: Make scripts executable
        run: |
          chmod +x install_dependencies.sh build.sh

      - name: Verify dependencies
        run: |
          ./install_dependencies.sh --verify

      - name: Build project
        run: |
          ./build.sh --${{ matrix.build_type == 'Release' && 'release' || 'debug' }}

      - name: Test build artifacts
        run: |
          cd build
          file Cedis
          ls -la Cedis
          echo "Build completed successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cedis-macos-${{ matrix.build_type }}
          path: build/Cedis
          retention-days: 7

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [linux, macos]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends libboost-system-dev libboost-thread-dev cmake build-essential clang-tidy

      - name: Make scripts executable
        run: |
          chmod +x install_dependencies.sh build.sh

      - name: Run static analysis
        run: |
          mkdir build-analysis
          cd build-analysis
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_CLANG_TIDY=clang-tidy
          make 2>&1 | tee clang-tidy-report.txt || true

      - name: Upload analysis report
        uses: actions/upload-artifact@v4
        with:
          name: clang-tidy-report
          path: build-analysis/clang-tidy-report.txt
          retention-days: 30

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [linux, macos]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends libboost-system-dev libboost-thread-dev cmake build-essential redis-tools

      - name: Make scripts executable
        run: |
          chmod +x install_dependencies.sh build.sh

      - name: Build project
        run: |
          ./build.sh --release

      - name: Start server in background
        run: |
          cd build
          timeout 30s ./Cedis &
          sleep 5

      - name: Test server connectivity
        run: |
          redis-cli -h 127.0.0.1 -p 6969 PING
          redis-cli -h 127.0.0.1 -p 6969 SET test "hello"
          redis-cli -h 127.0.0.1 -p 6969 GET test
          redis-cli -h 127.0.0.1 -p 6969 DEL test

      - name: Cleanup
        run: |
          pkill -f Cedis || true

  # Release workflow
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [linux, macos, code-quality, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep 'project(Cedis VERSION' CMakeLists.txt | sed 's/.*VERSION \([0-9.]*\).*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if release exists
        id: check_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if gh release view v${{ steps.get_version.outputs.version }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.get_version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.get_version.outputs.version }} does not exist"
          fi

      - name: Create Release
        if: steps.check_release.outputs.exists != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create v${{ steps.get_version.outputs.version }} \
            --title "Cedis v${{ steps.get_version.outputs.version }}" \
            --notes "## ðŸš€ Cedis v${{ steps.get_version.outputs.version }}

          ### âœ¨ Features
          - Asynchronous networking with Boost.Asio
          - Multi-client support
          - Redis-compatible protocol
          - Cross-platform compatibility

          ### ðŸ“¦ Downloads
          - Linux: Download from artifacts
          - macOS: Download from artifacts  
          - Windows: Download from artifacts

          ### ðŸ”§ Installation
          \`\`\`bash
          git clone https://github.com/ramzxy/cedis.git
          cd cedis
          ./install_dependencies.sh
          ./build.sh
          \`\`\`" \
            --draft=false \
            --prerelease=false

      - name: Download Linux artifacts
        if: steps.check_release.outputs.exists != 'true'
        uses: actions/download-artifact@v4
        with:
          name: cedis-linux-Release
          path: ./artifacts/linux

      - name: Download macOS artifacts
        if: steps.check_release.outputs.exists != 'true'
        uses: actions/download-artifact@v4
        with:
          name: cedis-macos-Release
          path: ./artifacts/macos

      - name: Upload Linux Release Asset
        if: steps.check_release.outputs.exists != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload v${{ steps.get_version.outputs.version }} \
            ./artifacts/linux/Cedis \
            --clobber

      - name: Upload macOS Release Asset
        if: steps.check_release.outputs.exists != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload v${{ steps.get_version.outputs.version }} \
            ./artifacts/macos/Cedis \
            --clobber
